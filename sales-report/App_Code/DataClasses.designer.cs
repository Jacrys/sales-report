#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="AdventureWorks_Data")]
public partial class DataClassesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertSalesOrderHeader(SalesOrderHeader instance);
  partial void UpdateSalesOrderHeader(SalesOrderHeader instance);
  partial void DeleteSalesOrderHeader(SalesOrderHeader instance);
  partial void InsertSalesOrderDetail(SalesOrderDetail instance);
  partial void UpdateSalesOrderDetail(SalesOrderDetail instance);
  partial void DeleteSalesOrderDetail(SalesOrderDetail instance);
  partial void InsertCustomer(Customer instance);
  partial void UpdateCustomer(Customer instance);
  partial void DeleteCustomer(Customer instance);
  partial void InsertStore(Store instance);
  partial void UpdateStore(Store instance);
  partial void DeleteStore(Store instance);
  partial void InsertPerson(Person instance);
  partial void UpdatePerson(Person instance);
  partial void DeletePerson(Person instance);
  partial void InsertProduct(Product instance);
  partial void UpdateProduct(Product instance);
  partial void DeleteProduct(Product instance);
  #endregion
	
	public DataClassesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["AdventureWorks_DataConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<SalesOrderHeader> SalesOrderHeaders
	{
		get
		{
			return this.GetTable<SalesOrderHeader>();
		}
	}
	
	public System.Data.Linq.Table<SalesOrderDetail> SalesOrderDetails
	{
		get
		{
			return this.GetTable<SalesOrderDetail>();
		}
	}
	
	public System.Data.Linq.Table<Customer> Customers
	{
		get
		{
			return this.GetTable<Customer>();
		}
	}
	
	public System.Data.Linq.Table<Store> Stores
	{
		get
		{
			return this.GetTable<Store>();
		}
	}
	
	public System.Data.Linq.Table<Person> Persons
	{
		get
		{
			return this.GetTable<Person>();
		}
	}
	
	public System.Data.Linq.Table<Product> Products
	{
		get
		{
			return this.GetTable<Product>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="Sales.SalesOrderHeader")]
public partial class SalesOrderHeader : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _SalesOrderID;
	
	private System.DateTime _OrderDate;
	
	private System.DateTime _DueDate;
	
	private string _SalesOrderNumber;
	
	private string _PurchaseOrderNumber;
	
	private string _AccountNumber;
	
	private int _CustomerID;
	
	private System.Nullable<int> _SalesPersonID;
	
	private decimal _TotalDue;
	
	private EntitySet<SalesOrderDetail> _SalesOrderDetails;
	
	private EntityRef<Customer> _Customer;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSalesOrderIDChanging(int value);
    partial void OnSalesOrderIDChanged();
    partial void OnOrderDateChanging(System.DateTime value);
    partial void OnOrderDateChanged();
    partial void OnDueDateChanging(System.DateTime value);
    partial void OnDueDateChanged();
    partial void OnSalesOrderNumberChanging(string value);
    partial void OnSalesOrderNumberChanged();
    partial void OnPurchaseOrderNumberChanging(string value);
    partial void OnPurchaseOrderNumberChanged();
    partial void OnAccountNumberChanging(string value);
    partial void OnAccountNumberChanged();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnSalesPersonIDChanging(System.Nullable<int> value);
    partial void OnSalesPersonIDChanged();
    partial void OnTotalDueChanging(decimal value);
    partial void OnTotalDueChanged();
    #endregion
	
	public SalesOrderHeader()
	{
		this._SalesOrderDetails = new EntitySet<SalesOrderDetail>(new Action<SalesOrderDetail>(this.attach_SalesOrderDetails), new Action<SalesOrderDetail>(this.detach_SalesOrderDetails));
		this._Customer = default(EntityRef<Customer>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalesOrderID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int SalesOrderID
	{
		get
		{
			return this._SalesOrderID;
		}
		set
		{
			if ((this._SalesOrderID != value))
			{
				this.OnSalesOrderIDChanging(value);
				this.SendPropertyChanging();
				this._SalesOrderID = value;
				this.SendPropertyChanged("SalesOrderID");
				this.OnSalesOrderIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderDate", DbType="DateTime NOT NULL")]
	public System.DateTime OrderDate
	{
		get
		{
			return this._OrderDate;
		}
		set
		{
			if ((this._OrderDate != value))
			{
				this.OnOrderDateChanging(value);
				this.SendPropertyChanging();
				this._OrderDate = value;
				this.SendPropertyChanged("OrderDate");
				this.OnOrderDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DueDate", DbType="DateTime NOT NULL")]
	public System.DateTime DueDate
	{
		get
		{
			return this._DueDate;
		}
		set
		{
			if ((this._DueDate != value))
			{
				this.OnDueDateChanging(value);
				this.SendPropertyChanging();
				this._DueDate = value;
				this.SendPropertyChanged("DueDate");
				this.OnDueDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalesOrderNumber", AutoSync=AutoSync.Always, DbType="NVarChar(25) NOT NULL", CanBeNull=false, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
	public string SalesOrderNumber
	{
		get
		{
			return this._SalesOrderNumber;
		}
		set
		{
			if ((this._SalesOrderNumber != value))
			{
				this.OnSalesOrderNumberChanging(value);
				this.SendPropertyChanging();
				this._SalesOrderNumber = value;
				this.SendPropertyChanged("SalesOrderNumber");
				this.OnSalesOrderNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PurchaseOrderNumber", DbType="NVarChar(25)")]
	public string PurchaseOrderNumber
	{
		get
		{
			return this._PurchaseOrderNumber;
		}
		set
		{
			if ((this._PurchaseOrderNumber != value))
			{
				this.OnPurchaseOrderNumberChanging(value);
				this.SendPropertyChanging();
				this._PurchaseOrderNumber = value;
				this.SendPropertyChanged("PurchaseOrderNumber");
				this.OnPurchaseOrderNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountNumber", DbType="NVarChar(15)")]
	public string AccountNumber
	{
		get
		{
			return this._AccountNumber;
		}
		set
		{
			if ((this._AccountNumber != value))
			{
				this.OnAccountNumberChanging(value);
				this.SendPropertyChanging();
				this._AccountNumber = value;
				this.SendPropertyChanged("AccountNumber");
				this.OnAccountNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int NOT NULL")]
	public int CustomerID
	{
		get
		{
			return this._CustomerID;
		}
		set
		{
			if ((this._CustomerID != value))
			{
				if (this._Customer.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCustomerIDChanging(value);
				this.SendPropertyChanging();
				this._CustomerID = value;
				this.SendPropertyChanged("CustomerID");
				this.OnCustomerIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalesPersonID", DbType="Int")]
	public System.Nullable<int> SalesPersonID
	{
		get
		{
			return this._SalesPersonID;
		}
		set
		{
			if ((this._SalesPersonID != value))
			{
				this.OnSalesPersonIDChanging(value);
				this.SendPropertyChanging();
				this._SalesPersonID = value;
				this.SendPropertyChanged("SalesPersonID");
				this.OnSalesPersonIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalDue", AutoSync=AutoSync.Always, DbType="Money NOT NULL", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
	public decimal TotalDue
	{
		get
		{
			return this._TotalDue;
		}
		set
		{
			if ((this._TotalDue != value))
			{
				this.OnTotalDueChanging(value);
				this.SendPropertyChanging();
				this._TotalDue = value;
				this.SendPropertyChanged("TotalDue");
				this.OnTotalDueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SalesOrderHeader_SalesOrderDetail", Storage="_SalesOrderDetails", ThisKey="SalesOrderID", OtherKey="SalesOrderID")]
	public EntitySet<SalesOrderDetail> SalesOrderDetails
	{
		get
		{
			return this._SalesOrderDetails;
		}
		set
		{
			this._SalesOrderDetails.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_SalesOrderHeader", Storage="_Customer", ThisKey="CustomerID", OtherKey="CustomerID", IsForeignKey=true)]
	public Customer Customer
	{
		get
		{
			return this._Customer.Entity;
		}
		set
		{
			Customer previousValue = this._Customer.Entity;
			if (((previousValue != value) 
						|| (this._Customer.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Customer.Entity = null;
					previousValue.SalesOrderHeaders.Remove(this);
				}
				this._Customer.Entity = value;
				if ((value != null))
				{
					value.SalesOrderHeaders.Add(this);
					this._CustomerID = value.CustomerID;
				}
				else
				{
					this._CustomerID = default(int);
				}
				this.SendPropertyChanged("Customer");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_SalesOrderDetails(SalesOrderDetail entity)
	{
		this.SendPropertyChanging();
		entity.SalesOrderHeader = this;
	}
	
	private void detach_SalesOrderDetails(SalesOrderDetail entity)
	{
		this.SendPropertyChanging();
		entity.SalesOrderHeader = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="Sales.SalesOrderDetail")]
public partial class SalesOrderDetail : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _SalesOrderID;
	
	private int _SalesOrderDetailID;
	
	private short _OrderQty;
	
	private int _ProductID;
	
	private decimal _UnitPrice;
	
	private decimal _UnitPriceDiscount;
	
	private decimal _LineTotal;
	
	private decimal _UnitNet;
	
	private EntityRef<SalesOrderHeader> _SalesOrderHeader;
	
	private EntityRef<Product> _Product;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSalesOrderIDChanging(int value);
    partial void OnSalesOrderIDChanged();
    partial void OnSalesOrderDetailIDChanging(int value);
    partial void OnSalesOrderDetailIDChanged();
    partial void OnOrderQtyChanging(short value);
    partial void OnOrderQtyChanged();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnUnitPriceChanging(decimal value);
    partial void OnUnitPriceChanged();
    partial void OnUnitPriceDiscountChanging(decimal value);
    partial void OnUnitPriceDiscountChanged();
    partial void OnLineTotalChanging(decimal value);
    partial void OnLineTotalChanged();
    partial void OnUnitNetChanging(string value);
    partial void OnUnitNetChanged();
    #endregion
	
	public SalesOrderDetail()
	{
		this._SalesOrderHeader = default(EntityRef<SalesOrderHeader>);
		this._Product = default(EntityRef<Product>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalesOrderID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int SalesOrderID
	{
		get
		{
			return this._SalesOrderID;
		}
		set
		{
			if ((this._SalesOrderID != value))
			{
				if (this._SalesOrderHeader.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSalesOrderIDChanging(value);
				this.SendPropertyChanging();
				this._SalesOrderID = value;
				this.SendPropertyChanged("SalesOrderID");
				this.OnSalesOrderIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalesOrderDetailID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int SalesOrderDetailID
	{
		get
		{
			return this._SalesOrderDetailID;
		}
		set
		{
			if ((this._SalesOrderDetailID != value))
			{
				this.OnSalesOrderDetailIDChanging(value);
				this.SendPropertyChanging();
				this._SalesOrderDetailID = value;
				this.SendPropertyChanged("SalesOrderDetailID");
				this.OnSalesOrderDetailIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderQty", DbType="SmallInt NOT NULL")]
	public short OrderQty
	{
		get
		{
			return this._OrderQty;
		}
		set
		{
			if ((this._OrderQty != value))
			{
				this.OnOrderQtyChanging(value);
				this.SendPropertyChanging();
				this._OrderQty = value;
				this.SendPropertyChanged("OrderQty");
				this.OnOrderQtyChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="Int NOT NULL")]
	public int ProductID
	{
		get
		{
			return this._ProductID;
		}
		set
		{
			if ((this._ProductID != value))
			{
				if (this._Product.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnProductIDChanging(value);
				this.SendPropertyChanging();
				this._ProductID = value;
				this.SendPropertyChanged("ProductID");
				this.OnProductIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitPrice", DbType="Money NOT NULL")]
	public decimal UnitPrice
	{
		get
		{
			return this._UnitPrice;
		}
		set
		{
			if ((this._UnitPrice != value))
			{
				this.OnUnitPriceChanging(value);
				this.SendPropertyChanging();
				this._UnitPrice = value;
				this.SendPropertyChanged("UnitPrice");
				this.OnUnitPriceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitPriceDiscount", DbType="Money NOT NULL")]
	public decimal UnitPriceDiscount
	{
		get
		{
			return this._UnitPriceDiscount;
		}
		set
		{
			if ((this._UnitPriceDiscount != value))
			{
				this.OnUnitPriceDiscountChanging(value);
				this.SendPropertyChanging();
				this._UnitPriceDiscount = value;
				this.SendPropertyChanged("UnitPriceDiscount");
				this.OnUnitPriceDiscountChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineTotal", AutoSync=AutoSync.Always, DbType="Decimal(38,6) NOT NULL", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
	public decimal LineTotal
	{
		get
		{
			return this._LineTotal;
		}
		set
		{
			if ((this._LineTotal != value))
			{
				this.OnLineTotalChanging(value);
				this.SendPropertyChanging();
				this._LineTotal = value;
				this.SendPropertyChanged("LineTotal");
				this.OnLineTotalChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitNet", CanBeNull=false)]
	public decimal UnitNet
	{
		get
		{
            return this._UnitPrice - this._UnitPriceDiscount;
		}
		
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SalesOrderHeader_SalesOrderDetail", Storage="_SalesOrderHeader", ThisKey="SalesOrderID", OtherKey="SalesOrderID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public SalesOrderHeader SalesOrderHeader
	{
		get
		{
			return this._SalesOrderHeader.Entity;
		}
		set
		{
			SalesOrderHeader previousValue = this._SalesOrderHeader.Entity;
			if (((previousValue != value) 
						|| (this._SalesOrderHeader.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._SalesOrderHeader.Entity = null;
					previousValue.SalesOrderDetails.Remove(this);
				}
				this._SalesOrderHeader.Entity = value;
				if ((value != null))
				{
					value.SalesOrderDetails.Add(this);
					this._SalesOrderID = value.SalesOrderID;
				}
				else
				{
					this._SalesOrderID = default(int);
				}
				this.SendPropertyChanged("SalesOrderHeader");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_SalesOrderDetail", Storage="_Product", ThisKey="ProductID", OtherKey="ProductID", IsForeignKey=true)]
	public Product Product
	{
		get
		{
			return this._Product.Entity;
		}
		set
		{
			Product previousValue = this._Product.Entity;
			if (((previousValue != value) 
						|| (this._Product.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Product.Entity = null;
					previousValue.SalesOrderDetails.Remove(this);
				}
				this._Product.Entity = value;
				if ((value != null))
				{
					value.SalesOrderDetails.Add(this);
					this._ProductID = value.ProductID;
				}
				else
				{
					this._ProductID = default(int);
				}
				this.SendPropertyChanged("Product");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="Sales.Customer")]
public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _CustomerID;
	
	private System.Nullable<int> _PersonID;
	
	private System.Nullable<int> _StoreID;
	
	private EntitySet<SalesOrderHeader> _SalesOrderHeaders;
	
	private EntityRef<Store> _Store;
	
	private EntityRef<Person> _Person;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnPersonIDChanging(System.Nullable<int> value);
    partial void OnPersonIDChanged();
    partial void OnStoreIDChanging(System.Nullable<int> value);
    partial void OnStoreIDChanged();
    #endregion
	
	public Customer()
	{
		this._SalesOrderHeaders = new EntitySet<SalesOrderHeader>(new Action<SalesOrderHeader>(this.attach_SalesOrderHeaders), new Action<SalesOrderHeader>(this.detach_SalesOrderHeaders));
		this._Store = default(EntityRef<Store>);
		this._Person = default(EntityRef<Person>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int CustomerID
	{
		get
		{
			return this._CustomerID;
		}
		set
		{
			if ((this._CustomerID != value))
			{
				this.OnCustomerIDChanging(value);
				this.SendPropertyChanging();
				this._CustomerID = value;
				this.SendPropertyChanged("CustomerID");
				this.OnCustomerIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonID", DbType="Int")]
	public System.Nullable<int> PersonID
	{
		get
		{
			return this._PersonID;
		}
		set
		{
			if ((this._PersonID != value))
			{
				if (this._Person.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPersonIDChanging(value);
				this.SendPropertyChanging();
				this._PersonID = value;
				this.SendPropertyChanged("PersonID");
				this.OnPersonIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StoreID", DbType="Int")]
	public System.Nullable<int> StoreID
	{
		get
		{
			return this._StoreID;
		}
		set
		{
			if ((this._StoreID != value))
			{
				if (this._Store.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnStoreIDChanging(value);
				this.SendPropertyChanging();
				this._StoreID = value;
				this.SendPropertyChanged("StoreID");
				this.OnStoreIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_SalesOrderHeader", Storage="_SalesOrderHeaders", ThisKey="CustomerID", OtherKey="CustomerID")]
	public EntitySet<SalesOrderHeader> SalesOrderHeaders
	{
		get
		{
			return this._SalesOrderHeaders;
		}
		set
		{
			this._SalesOrderHeaders.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Store_Customer", Storage="_Store", ThisKey="StoreID", OtherKey="BusinessEntityID", IsForeignKey=true)]
	public Store Store
	{
		get
		{
			return this._Store.Entity;
		}
		set
		{
			Store previousValue = this._Store.Entity;
			if (((previousValue != value) 
						|| (this._Store.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Store.Entity = null;
					previousValue.Customers.Remove(this);
				}
				this._Store.Entity = value;
				if ((value != null))
				{
					value.Customers.Add(this);
					this._StoreID = value.BusinessEntityID;
				}
				else
				{
					this._StoreID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Store");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Customer", Storage="_Person", ThisKey="PersonID", OtherKey="BusinessEntityID", IsForeignKey=true)]
	public Person Person
	{
		get
		{
			return this._Person.Entity;
		}
		set
		{
			Person previousValue = this._Person.Entity;
			if (((previousValue != value) 
						|| (this._Person.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Person.Entity = null;
					previousValue.Customers.Remove(this);
				}
				this._Person.Entity = value;
				if ((value != null))
				{
					value.Customers.Add(this);
					this._PersonID = value.BusinessEntityID;
				}
				else
				{
					this._PersonID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Person");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_SalesOrderHeaders(SalesOrderHeader entity)
	{
		this.SendPropertyChanging();
		entity.Customer = this;
	}
	
	private void detach_SalesOrderHeaders(SalesOrderHeader entity)
	{
		this.SendPropertyChanging();
		entity.Customer = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="Sales.Store")]
public partial class Store : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _BusinessEntityID;
	
	private string _Name;
	
	private EntitySet<Customer> _Customers;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBusinessEntityIDChanging(int value);
    partial void OnBusinessEntityIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
	
	public Store()
	{
		this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BusinessEntityID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int BusinessEntityID
	{
		get
		{
			return this._BusinessEntityID;
		}
		set
		{
			if ((this._BusinessEntityID != value))
			{
				this.OnBusinessEntityIDChanging(value);
				this.SendPropertyChanging();
				this._BusinessEntityID = value;
				this.SendPropertyChanged("BusinessEntityID");
				this.OnBusinessEntityIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Store_Customer", Storage="_Customers", ThisKey="BusinessEntityID", OtherKey="StoreID")]
	public EntitySet<Customer> Customers
	{
		get
		{
			return this._Customers;
		}
		set
		{
			this._Customers.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Customers(Customer entity)
	{
		this.SendPropertyChanging();
		entity.Store = this;
	}
	
	private void detach_Customers(Customer entity)
	{
		this.SendPropertyChanging();
		entity.Store = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="Person.Person")]
public partial class Person : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _BusinessEntityID;
	
	private string _FirstName;
	
	private string _LastName;
	
	private string _Name;
	
	private EntitySet<Customer> _Customers;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBusinessEntityIDChanging(int value);
    partial void OnBusinessEntityIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
	
	public Person()
	{
		this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BusinessEntityID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int BusinessEntityID
	{
		get
		{
			return this._BusinessEntityID;
		}
		set
		{
			if ((this._BusinessEntityID != value))
			{
				this.OnBusinessEntityIDChanging(value);
				this.SendPropertyChanging();
				this._BusinessEntityID = value;
				this.SendPropertyChanged("BusinessEntityID");
				this.OnBusinessEntityIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string FirstName
	{
		get
		{
			return this._FirstName;
		}
		set
		{
			if ((this._FirstName != value))
			{
				this.OnFirstNameChanging(value);
				this.SendPropertyChanging();
				this._FirstName = value;
				this.SendPropertyChanged("FirstName");
				this.OnFirstNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string LastName
	{
		get
		{
			return this._LastName;
		}
		set
		{
			if ((this._LastName != value))
			{
				this.OnLastNameChanging(value);
				this.SendPropertyChanging();
				this._LastName = value;
				this.SendPropertyChanged("LastName");
				this.OnLastNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Customer", Storage="_Customers", ThisKey="BusinessEntityID", OtherKey="PersonID")]
	public EntitySet<Customer> Customers
	{
		get
		{
			return this._Customers;
		}
		set
		{
			this._Customers.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Customers(Customer entity)
	{
		this.SendPropertyChanging();
		entity.Person = this;
	}
	
	private void detach_Customers(Customer entity)
	{
		this.SendPropertyChanging();
		entity.Person = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="Production.Product")]
public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ProductID;
	
	private string _ProductNumber;
	
	private EntitySet<SalesOrderDetail> _SalesOrderDetails;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnProductNumberChanging(string value);
    partial void OnProductNumberChanged();
    #endregion
	
	public Product()
	{
		this._SalesOrderDetails = new EntitySet<SalesOrderDetail>(new Action<SalesOrderDetail>(this.attach_SalesOrderDetails), new Action<SalesOrderDetail>(this.detach_SalesOrderDetails));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ProductID
	{
		get
		{
			return this._ProductID;
		}
		set
		{
			if ((this._ProductID != value))
			{
				this.OnProductIDChanging(value);
				this.SendPropertyChanging();
				this._ProductID = value;
				this.SendPropertyChanged("ProductID");
				this.OnProductIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductNumber", DbType="NVarChar(25) NOT NULL", CanBeNull=false)]
	public string ProductNumber
	{
		get
		{
			return this._ProductNumber;
		}
		set
		{
			if ((this._ProductNumber != value))
			{
				this.OnProductNumberChanging(value);
				this.SendPropertyChanging();
				this._ProductNumber = value;
				this.SendPropertyChanged("ProductNumber");
				this.OnProductNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_SalesOrderDetail", Storage="_SalesOrderDetails", ThisKey="ProductID", OtherKey="ProductID")]
	public EntitySet<SalesOrderDetail> SalesOrderDetails
	{
		get
		{
			return this._SalesOrderDetails;
		}
		set
		{
			this._SalesOrderDetails.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_SalesOrderDetails(SalesOrderDetail entity)
	{
		this.SendPropertyChanging();
		entity.Product = this;
	}
	
	private void detach_SalesOrderDetails(SalesOrderDetail entity)
	{
		this.SendPropertyChanging();
		entity.Product = null;
	}
}
#pragma warning restore 1591
